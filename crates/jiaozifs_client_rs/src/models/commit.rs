/*
 * jiaozifs API
 *
 * jiaozifs HTTP API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Commit {
    #[serde(rename = "hash")]
    pub hash: String,
    #[serde(rename = "repository_id")]
    pub repository_id: uuid::Uuid,
    #[serde(rename = "author")]
    pub author: Box<models::Signature>,
    #[serde(rename = "committer")]
    pub committer: Box<models::Signature>,
    #[serde(rename = "merge_tag")]
    pub merge_tag: String,
    #[serde(rename = "message")]
    pub message: String,
    #[serde(rename = "tree_hash")]
    pub tree_hash: String,
    #[serde(rename = "parent_hashes")]
    pub parent_hashes: Vec<String>,
    #[serde(rename = "created_at")]
    pub created_at: i64,
    #[serde(rename = "updated_at")]
    pub updated_at: i64,
}

impl Commit {
    pub fn new(
        hash: String,
        repository_id: uuid::Uuid,
        author: models::Signature,
        committer: models::Signature,
        merge_tag: String,
        message: String,
        tree_hash: String,
        parent_hashes: Vec<String>,
        created_at: i64,
        updated_at: i64,
    ) -> Commit {
        Commit {
            hash,
            repository_id,
            author: Box::new(author),
            committer: Box::new(committer),
            merge_tag,
            message,
            tree_hash,
            parent_hashes,
            created_at,
            updated_at,
        }
    }
}
