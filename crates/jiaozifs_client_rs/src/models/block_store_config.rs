/*
 * jiaozifs API
 *
 * jiaozifs HTTP API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BlockStoreConfig {
    /// type of support storage type
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "default_namespace_prefix", skip_serializing_if = "Option::is_none")]
    pub default_namespace_prefix: Option<String>,
    #[serde(rename = "local", skip_serializing_if = "Option::is_none")]
    pub local: Option<Box<models::BlockStoreConfigLocal>>,
    #[serde(rename = "azure", skip_serializing_if = "Option::is_none")]
    pub azure: Option<Box<models::BlockStoreConfigAzure>>,
    #[serde(rename = "gs", skip_serializing_if = "Option::is_none")]
    pub gs: Option<Box<models::BlockStoreConfigGs>>,
    #[serde(rename = "s3", skip_serializing_if = "Option::is_none")]
    pub s3: Option<Box<models::BlockStoreConfigS3>>,
}

impl BlockStoreConfig {
    pub fn new(r#type: Type) -> BlockStoreConfig {
        BlockStoreConfig {
            r#type,
            default_namespace_prefix: None,
            local: None,
            azure: None,
            gs: None,
            s3: None,
        }
    }
}
/// type of support storage type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "local")]
    Local,
    #[serde(rename = "gs")]
    Gs,
    #[serde(rename = "azure")]
    Azure,
    #[serde(rename = "s3")]
    S3,
}

impl Default for Type {
    fn default() -> Type {
        Self::Local
    }
}

